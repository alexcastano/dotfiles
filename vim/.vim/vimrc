call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'benmills/vimux'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'danro/rename.vim'
Plug 'depuracao/vim-rdoc'
Plug 'digitaltoad/vim-jade'
Plug 'godlygeek/tabular'
Plug 'kana/vim-textobj-user'
Plug 'kchmck/vim-coffee-script'
Plug 'kien/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'mxw/vim-jsx'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'nelstrom/vim-visual-star-search'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/syntastic'
Plug 'SirVer/ultisnips'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-ruby/vim-ruby'

call plug#end()

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set history=50    " keep 50 lines of command line history

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  set guifont=Monospace\ 9
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  runtime macros/matchit.vim

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  autocmd FileType text,markdown,html setlocal wrap linebreak nolist number
  au BufRead,BufNewFile *.md set filetype=markdown


  " autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent

  augroup END

else

  set autoindent    " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

set t_Co=16
set background=dark
let g:solarized_termcolors=16
let g:solarized_termtrans = 1
colorscheme solarized

" Tabs
set ts=2  " Tabs are 2 spaces
set shiftwidth=2  " Tabs under smart indent
set smarttab
set expandtab

set backspace=indent,eol,start " Backspace over everything in insert mode
set showcmd   " Show (partial) command in status line.
set ignorecase    " Do case insensitive matching
set smartcase   " Do smart case matching
set incsearch   " Incremental search
set hls             " Highlight
set autowrite   " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned

set cf  " Enable error files & error jumping.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nowrap  " Line wrapping off
set timeoutlen=1000  " Time to wait after ESC (default causes an annoying delay)
set ttimeoutlen=-1
set laststatus=2  " Always show status line.

" Fold
set foldmethod=indent

" set nu  " Line numbers on

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a   " Enable mouse usage (all modes) in terminals
  set ttymouse=xterm2
  set mousehide     " Hide mouse after chars typed
endif

" No blinking  No noise
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" " Formatting (some of these are for coding in C and C++)
set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
abbr #i #include
abbr #d #define

" Completion commands with tab
set wildmode=longest,list,full
set wildmenu


" Save as sudo
command WW w !sudo tee % >/dev/null

"
" OpenURL command for rails plugin
:command -bar -nargs=1 OpenURL :!chromium <args>

" Rails default file
let g:rails_default_file='config/database.yml'

"
" Visual
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.

" Backups
if has("vms")
  set nobackup    " do not keep a backup file, use versions instead
else
  set backup    " keep a backup file
endif

set backupdir=~/.vim_backups " Where backups will go.

set directory=~/.vim_tmp     " Where temporary files will go.

" leader key is space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

"" Librery mode is faster
"let g:clang_use_library = 1
"
"" Complete options (disable preview scratch window)
"set completeopt=menu,menuone,longest
"" Limit popup menu height
"set pumheight=15
"
"map <leader>cc :call g:ClangUpdateQuickFix()<CR>
"
"" SuperTab option for context aware completion
"let g:SuperTabDefaultCompletionType="context"
"
"" clang complete settings
"let g:clang_snippets=1
"let g:clang_snippets_engine='ultisnips'
"
"let g:clang_user_options='--std=c++11'
"
"" Auto select first option but doesn't write
"let g:clang_auto_select=1
"" Enable auto popup, use <Tab> to autocomplete
"let g:clang_complete_auto=1
"" Show clang errors in the quickfix window
"let g:clang_complete_copen=1
"" Search for error automatically
"let g:clang_periodic_quickfix=0

"
" " sesiones
" " map ,s :mksession! ~/.vim/.session
" " map ,r :source ~/.vim/.session
"
" This is to set the current directory
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew ;e %%
map <leader>es ;sp %%
map <leader>ev ;vsp %%
map <leader>et ;tabe %%

" better movement in spplit lines
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
noremap  <buffer> <silent> 0 g0
noremap  <buffer> <silent> $ g$

" Faster windows movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" Faster tab movement
nmap <Esc>[27;5;9~ ;tabnext<cr>
" This provokes delay
" imap <Esc>[27;5;9~ <Esc>;tabnext<cr>

nmap <Esc>[27;6;9~ ;tabprevious<cr>
" This provokes delay
" imap <Esc>[27;6;9~ <Esc>;tabprevious<cr>


" Swap arguments
map <F9> "wdiwdwep"wp


" highligth extre spaces
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Yank until the end of the line
map Y y$

" disabling Q
map Q <Nop>

" Vimux
" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <leader>r "vy ;call VimuxSendText(@v)<CR>']
" VimuxSendKeys("'" . escape(@k, "'") . "'")

" Select current paragraph and send it to tmux
nmap <leader>rr vip<leader>r

" Run the nearest test with rspec
nmap <leader>rT ;call VimuxRunCommand("clear; bin/rspec " . bufname("%"))<CR>

" Run the current file with rspec
nmap <leader>rt ;call VimuxRunCommand("clear; bin/rspec " . bufname("%") . ":" . line('.'))<CR>

" Prompt for a command to run
nmap <leader>rc ;VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
nmap <leader>r. ;VimuxRunLastCommand<CR>

" Inspect runner pane
nmap <leader>ri ;VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
nmap <leader>rq ;VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
nmap <leader>rx ;VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
nmap <leader>rz ;call VimuxZoomRunner()<CR>

" Pretty json
nmap <leader>pj vip<leader>pj
vmap <leader>pj ;!python -m json.tool<CR>

" Tabbar
map <leader>t ;TagbarToggle<CR>

" Vim Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Gitgutter
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
" let g:gitgutter_realtime = 750
highlight clear SignColumn

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 0
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0

let g:syntastic_ruby_checkers            = ['rubylint', 'mri']


" Undo
set undofile                " Save undo's after file closes
set undodir=~/.vim_tmp/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
