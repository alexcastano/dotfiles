" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set virtualedit+=onemore

" leader key is space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

call plug#begin('~/.vim/plugged')

Plug 'github/copilot.vim'

" FZF {{{1
Plug 'junegunn/fzf.vim'
"
" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'window': '10split enew' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

augroup fzf_group
  autocmd!
  autocmd FileType fzf tnoremap <buffer> <esc> <C-c>
augroup END


nnoremap <silent><nowait> <c-p> :Files<cr>
nnoremap <silent><nowait> <leader>fl :BLines<cr>
nnoremap <silent><nowait> <leader>fs :Rg<space>

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }


" MovePlugins {{{1
nnoremap # m`:keepjumps normal! *``b<cr>

" TextObjects {{{1

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'nelstrom/vim-textobj-rubyblock', {'for': 'ruby'}

Plug 'aoswalt/vim-textobj-elixir', {'for': 'elixir'}
let g:vim_textobj_elixir_mapping = 'b'

Plug 'sgur/vim-textobj-parameter' " function parameter
let g:vim_textobj_parameter_mapping = ','

" next and last ()
onoremap in( :<c-u>execute "normal! /(\r:nohlsearch\rvi("<cr>
onoremap il( :<c-u>execute "normal! ?)\r:nohlsearch\rvi("<cr>
onoremap an( :<c-u>execute "normal! /(\r:nohlsearch\rva("<cr>
onoremap al( :<c-u>execute "normal! ?)\r:nohlsearch\rva("<cr>

onoremap in) :<c-u>execute "normal! /(\r:nohlsearch\rvi("<cr>
onoremap il) :<c-u>execute "normal! ?)\r:nohlsearch\rvi("<cr>
onoremap an) :<c-u>execute "normal! /(\r:nohlsearch\rva("<cr>
onoremap al) :<c-u>execute "normal! ?)\r:nohlsearch\rva("<cr>

" next and last []
onoremap in[ :<c-u>execute "normal! /[\r:nohlsearch\rvi]"<cr>
onoremap il[ :<c-u>execute "normal! ?[\r:nohlsearch\rvi]"<cr>
onoremap an[ :<c-u>execute "normal! /[\r:nohlsearch\rva]"<cr>
onoremap al[ :<c-u>execute "normal! ?[\r:nohlsearch\rva]"<cr>

onoremap in] :<c-u>execute "normal! /[\r:nohlsearch\rvi]"<cr>
onoremap il] :<c-u>execute "normal! ?[\r:nohlsearch\rvi]"<cr>
onoremap an] :<c-u>execute "normal! /[\r:nohlsearch\rva]"<cr>
onoremap al] :<c-u>execute "normal! ?[\r:nohlsearch\rva]"<cr>

" next and last {}
onoremap in{ :<c-u>execute "normal! /{\r:nohlsearch\rvi}"<cr>
onoremap il{ :<c-u>execute "normal! ?{\r:nohlsearch\rvi}"<cr>
onoremap an{ :<c-u>execute "normal! /{\r:nohlsearch\rva}"<cr>
onoremap al{ :<c-u>execute "normal! ?{\r:nohlsearch\rva}"<cr>

onoremap in} :<c-u>execute "normal! /{\r:nohlsearch\rvi}"<cr>
onoremap il} :<c-u>execute "normal! ?{\r:nohlsearch\rvi}"<cr>
onoremap an} :<c-u>execute "normal! /{\r:nohlsearch\rva}"<cr>
onoremap al} :<c-u>execute "normal! ?{\r:nohlsearch\rva}"<cr>

augroup text_objects_elixir
  autocmd!
  " FIXME this should be in elixir file ftplugin?

  " FIXME no funciona por el %
  " functions
  " autocmd FileType elixir onoremap <buffer> af :<c-u>execute "normal! ?^\\s\\+defp\\=\\ \r:nohlsearch\rV$%"<cr>
augroup END



" TODO {{{1
Plug 'airblade/vim-gitgutter'

Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'

" {{{2
Plug 'mileszs/ack.vim'

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
" grep word under cursor
nnoremap <leader>gg :silent execute "Ack! " . shellescape(expand("<cword>")) <cr>

nnoremap <leader>g :set operatorfunc=GrepOperator<cr>g@
vnoremap <leader>g :<c-u>call GrepOperator(visualmode())<cr>

function! GrepOperator(type)
  echom a:type
  if a:type ==# 'v'
    normal! `<v`>"gy
  elseif a:type ==# 'char'
    normal! `[v`]"gy
  else
    return
  endif

  silent execute "Ack! " . shellescape(@g)
endfunction
" nnoremap <leader>gg :Ack! "\b<C-R><C-W>\b"<cr>
" nnoremap <leader>gt :Ack! "TODO\\|FIXME"<cr>
" nnoremap <leader>gs :Ack! "" \| cw<Left><Left><Left><Left><Left><Left>
" vnoremap <leader>g "gy:Ack! "<C-R>g"<cr>


Plug 'nelstrom/vim-visual-star-search'

Plug 'nicwest/QQ.vim' " Postman in vim
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}

Plug 'powerman/vim-plugin-AnsiEsc'
" Plug 'pseewald/anyfold'
"
Plug 'sheerun/vim-polyglot'
" let g:polyglot_disabled = ['autoindent']

" Plug 'elixir-editors/vim-elixir'

Plug 'alexcastano/nextflow.vim'
Plug 'szw/vim-maximizer'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
" Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'


" =================================
" Visual plugins
" =================================
" Visual {{{1


" Plug 'nathanaelkane/vim-indent-guides' " margin vertical lines
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'neoterm', 'terminal']

" =================================
" Text plugins
" =================================

Plug 'machakann/vim-highlightedyank' " highlight yanked text
let g:highlightedyank_highlight_duration = 500

Plug 'AndrewRadev/splitjoin.vim' " change from one line to multiple line form and viceversa gS gJ
" Plug 'SirVer/ultisnips'
" Plug 'ncm2/ncm2-ultisnips'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
" let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
" let g:UltiSnipsRemoveSelectModeMappings = 0


" =================================
" Window plugins
" =================================

Plug 'moll/vim-bbye'        " close buffer but not window :Bd
Plug 'wesQ3/vim-windowswap' " exchange two windows <leader>ww

" =================================
" File plugins
" =================================

Plug 'pbrisbin/vim-mkdir' " mkdir directories automatically with filename
Plug 'danro/rename.vim'   " rename the file without writting the full path


" FIXME move to a proper site
autocmd! FileType help :wincmd L | :vert resize 80

" Term {{{1

tnoremap <C-space><Esc> <C-\><C-n>
tnoremap <expr> <C-space><C-r> '<C-\><C-N>"'.nr2char(getchar()).'pi'

augroup term_group
  autocmd!
  " Buffer-local options
  " autocmd TermOpen * setlocal bufhidden=hide
  autocmd TermOpen * setlocal noswapfile
  " autocmd TermOpen * setlocal nobuflisted
  autocmd TermOpen * setlocal nomodified

  " Window-local options
  autocmd TermOpen * setlocal nolist
  autocmd TermOpen * setlocal nowrap
  autocmd TermOpen * setlocal nospell
  autocmd TermOpen * setlocal nonumber
  autocmd TermOpen * setlocal norelativenumber
  autocmd TermOpen * setlocal nofoldenable
  autocmd TermOpen * setlocal foldcolumn=0
augroup END

" executes in the current neovim instance
let $VISUAL="nvr -cc vsplit --remote-wait +'set bufhidden=wipe'"
let $EDITOR="nvr -cc vsplit --remote-wait +'set bufhidden=wipe'"


" Different color term cursor
" TODO better colors
" highlight! link TermCursor Cursor
" highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15

" Plug 'Lenovsky/nuake'
Plug 'alexcastano/nuake'
" Plug '~/vim/nuake'

let g:nuake_position = 'right'
let g:close_if_last_standing = 0

inoremap <silent> <A-CR> <c-\><c-n>:Nuake<cr>
tnoremap <silent> <A-CR> <c-\><c-n>:Nuake<cr>
nnoremap <silent> <A-CR> :Nuake<cr>

nmap <leader>r <Plug>(nuake-send)
xmap <leader>r <Plug>(nuake-send)
nmap <leader>r. :call nuake#RepeatLastCommand()<cr>
nmap <leader>rr <Plug>(nuake-send-line)

Plug 'kassio/neoterm'

" let g:term_vert_size = 110
" let g:term_hor_size = 20
let g:term_vert_size = ''
let g:term_hor_size = ''
let g:neoterm_size = g:term_vert_size
let g:neoterm_default_mod = 'vertical botright'
let g:neoterm_autoscroll = 1
let g:neoterm_fixedsize = 1
let g:neoterm_autoinsert = 1
let g:neoterm_command_prefix = ''

" Create some commands that makes the splits easy

function! OpenTermV()
  let g:neoterm_size = g:term_vert_size
  execute 'vert Tnew'
  let g:neoterm_size = g:term_vert_size
endfunction

function! OpenTermH()
  let g:neoterm_size = g:term_hor_size
  execute 'belowright Tnew'
  let g:neoterm_size = g:term_vert_size
endfunction

function! ShowTerm()
  let l:autoinsert = g:neoterm_autoinsert
  let g:neoterm_autoinsert = 0
  execute 'Ttoggle'
  let g:neoterm_autoinsert = l:autoinsert
endfunction

" tabs
" Go to tab by number
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt
nnoremap <A-0> :tablast<cr>

nnoremap <C-tab> gt
nnoremap <C-S-tab> gT
nnoremap <S-C-tab> gT
nnoremap <A-tab> gt
nnoremap <A-S-tab> gT
" because previous map doesnt work we just simplify
nnoremap <S-tab> gT

" inoremap <A-tab> gt
" inoremap <A-S-tab> gT
" " because previous map doesnt work we just simplify
" inoremap <S-tab> gT

tnoremap <A-tab> <C-\><C-n>gt
tnoremap <A-S-tab> <C-\><C-n>gT
" because previous map doesnt work we just simplify
" tnoremap <S-tab> <C-\><C-n>gT

" Insert automatically in terminal a no numbers
augroup vimrc_term_autoinsert
  " FIXME Incompatible with vim-test
  " autocmd BufWinEnter,WinEnter,TabEnter term://* startinsert
  " autocmd TermOpen * setlocal nonumber norelativenumber " | \ startinsert
augroup END

tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
tnoremap <A-h> <C-\><C-n><C-w>h

inoremap <A-j> <C-w>j
inoremap <A-k> <C-w>k
inoremap <A-l> <C-w>l
inoremap <A-h> <C-w>h

nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-h> <C-w>h

" toggle main neoterm
" inoremap <silent> <A-CR> <esc>:<c-u>exec v:count.'Ttoggle'<cr>
" tnoremap <silent> <A-CR> <c-\><c-n>:<c-u>exec v:count.'Ttoggle'<cr>
" nnoremap <silent> <A-CR> :<c-u>exec v:count.'Ttoggle'<cr>
" without autoinsert
nnoremap <silent> <leader>ts :call nuake#ShowWindow()<cr>

" new terms
nnoremap <silent> <c-space>n :tab Tnew<cr>
nnoremap <silent> <c-space>h :call OpenTermH()<cr>
nnoremap <silent> <c-space>v :call OpenTermV()<cr>

tnoremap <silent> <c-space>n <c-\><c-n>:tab Tnew<cr>
tnoremap <silent> <c-space>h <c-\><c-n>:call OpenTermH()<cr>
tnoremap <silent> <c-space>v <c-\><c-n>:call OpenTermV()<cr>

nnoremap <silent> <A-t> :tab Tnew<cr>
nnoremap <silent> <A--> :call OpenTermH()<cr>
nnoremap <silent> <A-\> :call OpenTermV()<cr>

nnoremap <silent> <leader>tl :call nuake#SendCommand([""])<cr>
" FIXME
nnoremap <silent> <leader>tk :call nuake#SendCommand([""])<cr>
nnoremap <silent> <leader>tK :call nuake#SendCommand([""])<cr>

" :TREPLSetTerm {term-id}                                          *:TREPLSetTerm*
" Chooses, or changes, the current neoterm to run the REPL commands.
nnoremap <leader>s <Plug>(neoterm-repl-send)
xnoremap <leader>s <Plug>(neoterm-repl-send)
nnoremap <leader>ss <Plug>(neoterm-repl-send-line)
nnoremap <leader>sf :TREPLSendFile<cr>

" TODO
" tnoremap <leader>cd Apwd\|xclip -selection clipboard<CR><C-\><C-n>:cd <C-r>+<CR>i
" inoremap <leader>cd pwd\|xclip -selection clipboard<CR><C-\><C-n>:cd <C-r>+<CR>i
" nnoremap <leader>cd Apwd\|xclip -selection clipboard<CR><C-\><C-n>:cd <C-r>+<CR>
" :cd <C-r>+<CR>i

augroup elixir_run
  autocmd!
  " FIXME move to another place?
  autocmd FileType elixir nmap <silent> <C-]> <Plug>(coc-definition)

  autocmd FileType elixir ab __pbt  IO.inspect(Process.info(self(), :current_stacktrace), label: "STACKTRACE")
  autocmd FileType elixir nnoremap <leader>cc :Ndo iex -S mix<cr>
  autocmd FileType elixir nnoremap <leader>cb :Ndo mix compile<cr>
  autocmd FileType elixir nnoremap <leader>cx :Ndo mix do clean, compile<cr>
  autocmd FileType elixir nnoremap <leader>cl :Ndo mix credo<cr>
  autocmd FileType elixir nnoremap <leader>cd :Ndo mix deps.get<cr>
  autocmd FileType elixir nnoremap <leader>ce :Ndo mix do ecto.drop, ecto.create, ecto.migrate; MIX_ENV=test mix do ecto.drop, ecto.create, ecto.migrate<cr>
  autocmd FileType elixir nnoremap <leader>cp :Ndo iex -S mix phx.server<cr>
  autocmd FileType elixir nnoremap <leader>tF :Ndo mix test --failed<cr>

  " TODO delete
  " autocmd FileType fzf nnoremap <buffer> <esc> <C-c>
augroup END
" =================================
" Test
" =================================

Plug 'janko-m/vim-test'
let g:test#custom_strategies = {'nuake': {cmd -> nuake#SendCommand(["" . cmd])}}
let g:test#strategy = 'nuake'


function! RunTestSuite()
  call nuake#SendCommand([""])
  if filereadable('bin/test_suite')
    Ndo echo 'bin/test_suite'
    Ndo bin/test_suite
  elseif filereadable("bin/test")
    Ndo echo 'bin/test'
    Ndo bin/test
  else
    TestSuite
  endif
endfunction

nnoremap <leader>tt :TestNearest<cr>
nnoremap <leader>tf :TestFile<cr>
nnoremap <leader>ta :call RunTestSuite()<cr>
nnoremap <leader>t. :TestLast<cr>
nnoremap <leader>tv :TestVisit<cr>
autocmd FileType elixir nnoremap <leader>tF :Ndo mix test --failed<cr>


" =================================
" Projectionist
" =================================

Plug 'tpope/vim-projectionist'

let g:projectionist_heuristics = {}

" function! s:loadProjection(name, file)
"   let l:json_path = s:projections_base_dir . \"/" . a:file
"   let l:json = readfile(l:json_path)
"   let l:dict = projectionist#json_parse(l:json)
"   call projectionist#append(a:name, l:dict)
" endfunction

let g:projectionist_heuristics['mix.exs'] = {
            \ 'apps/*/mix.exs': { 'type': 'mix' },
            \ 'lib/*.ex': {
            \   'type': 'lib',
            \   'alternate': 'test/{}_test.exs',
            \   'template': ['defmodule {camelcase|capitalize|dot} do', 'end'],
            \ },
            \ 'test/*_test.exs': {
            \   'type': 'test',
            \   'alternate': 'lib/{}.ex',
            \   'template': ['defmodule {camelcase|capitalize|dot}Test do', '  use ExUnit.Case', '', '  alias {camelcase|capitalize|dot}, as: Subject', '', '  doctest Subject', 'end'],
            \ },
            \ 'mix.exs': { 'type': 'mix' },
            \ 'config/*.exs': { 'type': 'config' },
            \ 'apps/*/application.ex': {
            \   'type': 'app'
            \ },
            \ '*.ex': {
            \   'makery': {
            \     'lint': { 'compiler': 'credo' },
            \     'test': { 'compiler': 'exunit' },
            \     'build': { 'compiler': 'mix' }
            \   }
            \ },
            \ '*.exs': {
            \   'makery': {
            \     'lint': { 'compiler': 'credo' },
            \     'test': { 'compiler': 'exunit' },
            \     'build': { 'compiler': 'mix' }
            \   }
            \ }
            \ }


" =================================
" Ruby
" =================================

Plug 'tpope/vim-rails', {'for': 'ruby'}
Plug 'tpope/vim-rake', {'for': 'ruby'}
Plug 'tpope/vim-rbenv', {'for': 'ruby'}
Plug 'tpope/vim-bundler', {'for': 'ruby'}



set splitright " open vsplit in the right side
set splitbelow " open split in the bottom side


" LanguageServer {{{1

" Use release branch (Recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf'
Plug 'honza/vim-snippets'

nnoremap <silent> <leader>ff :<C-u>CocFzfList outline --kind Function<CR>
nnoremap <silent> <leader>fF :<C-u>CocFzfList symbols --kind Function<CR>
nnoremap <silent> <leader>fs :<C-u>CocFzfList snippets<CR>

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

" let g:coc_fzf_preview = ''
" let g:coc_fzf_opts = []

let g:coc_global_extensions = [
      \'coc-actions',
      \'coc-css',
      \'coc-elixir',
      \'coc-html',
      \'coc-json',
      \'coc-snippets',
      \'coc-vimlsp',
      \'coc-xml',
      \'coc-yaml',
      \]

" Some servers have issues with backup files, see #649.
set nobackup " do not keep a backup file, use versions instead
set nowritebackup " do not keep a backup file, use versions instead
" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent><nowait> <leader>d :<C-u>CocDiagnostics<cr>

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>


function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Hide float window
" inoremap <C-q>  "\<c-r>=coc-float-hide)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> \a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> \e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> \c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> \o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> \s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> \j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> \k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> \p  :<C-u>CocListResume<CR>

" Live substitution
set inccommand=split

call plug#end()

let theme_script_path = expand("~/.local/share/tinted-theming/tinty/base16-vim-colors-file.vim")

function! FileExists(file_path)
  return filereadable(a:file_path) == 1
endfunction

function! HandleFocusGained()
  if FileExists(g:theme_script_path)
    execute 'source ' . g:theme_script_path
  endif
endfunction

if FileExists(theme_script_path)
  set termguicolors
  let g:tinted_colorspace = 256
  execute 'source ' . theme_script_path
  autocmd FocusGained * call HandleFocusGained()
endif

 " call s:loadProjection("mix.exs", \"elixir_projections.json")

" allow backspacing over everything in insert mode
set history=500    " keep 50 lines of command line history


" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

runtime macros/matchit.vim

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  autocmd FileType text,markdown,html setlocal wrap linebreak nolist number
  au BufRead,BufNewFile *.md set filetype=markdown


  " autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent

augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif


" Tabs
set ts=2  " Tabs are 2 spaces
set shiftwidth=2  " Tabs under smart indent
set smarttab
set expandtab
set cursorline

set backspace=indent,eol,start " Backspace over everything in insert mode
set showcmd   " Show (partial) command in status line.
set ignorecase    " Do case insensitive matching
set smartcase   " Do smart case matching
set incsearch   " Incremental search
set hls             " Highlight
set autowrite   " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned

set cf  " Enable error files & error jumping.
set autowrite  " Writes on make/shell commands
set ruler  " Ruler on
set nowrap  " Line wrapping off
set timeoutlen=1000  " Time to wait after ESC (default causes an annoying delay)
set ttimeoutlen=-1
set laststatus=2  " Always show status line.

set showmatch  " Show matching brackets.
set matchtime=5  "  Tenths of a second to show the matching paren

" Fold
" set foldmethod=indent
autocmd Syntax c,cpp,vim,xml,html,xhtml,elixir setlocal foldmethod=syntax
" set foldmethod=syntax
set foldnestmax=10
" set nofoldenable
set foldlevel=2
set foldlevelstart=1

set relativenumber
set number

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a   " Enable mouse usage (all modes) in terminals
  set mousehide     " Hide mouse after chars typed
endif

" No blinking  No noise
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" " Formatting (some of these are for coding in C and C++)
set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr

" Completion commands with tab
set wildmode=longest,list,full
set wildmenu


" Save as sudo
command! WW w !sudo tee % >/dev/null

" OpenURL command for rails plugin
":command -bar -nargs=1 OpenURL :!chromium <args>

" Rails default file
let g:rails_default_file='config/database.yml'

"
" Visual

set backupdir=~/.vim_backups " Where backups will go.
set directory=~/.vim_tmp     " Where temporary files will go.

" Reload vim after save this file
" autocmd BufWritePost vimrc source %

" Faster command mode
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" sessions
" map <leader>ss ;mksession! ~/.vim_tmp/last_session<cr>
" map <leader>sl ;source ~/.vim_tmp/last_session<cr>

" This is to set the current directory
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew ;e %%
map <leader>es ;sp %%
map <leader>ev ;vsp %%
map <leader>et ;tabe %%

" map <leader>d "_d

" Each time you press S, the yanked text is _stamped_ over the current word.
nnoremap S diw"0P
vnoremap S "_d"0P

" better movement in spplit lines
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
" noremap  <buffer> <silent> 0 g0
" noremap  <buffer> <silent> $ g$

" highligth extre spaces
" highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()

" Yank until the end of the line
map Y y$

" disabling Q
map Q <Nop>


" Pretty json
nnoremap <leader>pj vip:!python -m json.tool<cr>
vnoremap <leader>pj :!python -m json.tool<cr>

" Pretty xml
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

nnoremap <leader>px :PrettyXML<cr>

" Vim Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Gitgutter
let g:gitgutter_realtime = 750
" let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
highlight clear SignColumn

" Syntastic
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list            = 0
" let g:syntastic_check_on_open            = 1
" let g:syntastic_check_on_wq              = 0


" Undo
set undofile                " Save undo's after file closes
set undodir=~/.vim_undo     " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" Align with tabular
" nnoremap <leader>a= :Tabularize /=<cr>
" vnoremap <leader>a= :Tabularize /=<cr>
" nnoremap <leader>a: :Tabularize /:\zs<cr>
" vnoremap <leader>a: :Tabularize /:\zs<cr>
" nnoremap <leader>a# :Tabularize /#<cr>
" vnoremap <leader>a# :Tabularize /#<cr>
" nnoremap <leader>a\| :Tabularize /\|<cr>
" vnoremap <leader>a\| :Tabularize /\|<cr>
" nnoremap <leader>a" :Tabularize /"<cr>
" vnoremap <leader>a" :Tabularize /"<cr>

vnoremap R "_dP

set wildignore+=*/tmp/*,*/node_modules/*

" resize horzontal split window
nnoremap <Left> <C-W><
nnoremap <Right> <C-W>>
" resize vertical split window
nnoremap <Up> <C-W>-
nnoremap <Down> <C-W>+

let g:maximizer_set_default_mapping = 0
nnoremap <leader>z :MaximizerToggle<cr>

ab riex require IEx; IEx.pry
ab rpry require 'pry'; binding.pry
ab rirb require 'irb'; binding.irb
ab lastest latest

autocmd BufRead,BufNewFile *.md setlocal spell
set complete+=kspell

" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END

" Remove current file
command! RRm call delete(expand('%'))

" Remove current file and buffer
command! RRM call delete(expand('%')) | bdelete!

" VIMRC {{{1
" FIXME when updating to nvim init => nnoremap <leader>V :vsplit $MYVIMRC<cr>
nnoremap <leader>V :vsplit ~/.vim/vimrc<cr>
nnoremap <leader>R :so $MYVIMRC<cr> " :echo "Vim Reloaded"

" Modeline {{{1
" vim: ts=4 sw=2 sts=2 et foldenable foldmethod=marker
